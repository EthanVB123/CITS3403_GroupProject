# boilerplate starting point generated by ChatGPT, all actual tests created by hand
import unittest
from app import create_app, db
from app.models import Users  # Assuming you have a User model
from app import verifySolution
class FlaskAppTestCase(unittest.TestCase):
    
    # Set up the app for testing
    def setUp(self):
        self.app = create_app('app.config.TestingConfig')  # Load the TestingConfig
        self.client = self.app.test_client()  # Flask test client
        self.app_context = self.app.app_context()
        self.app_context.push()  # Push app context to simulate running within Flask

        db.create_all()  # Create tables using the testing database

    # Tear down after each test
    def tearDown(self):
        db.session.remove()  # Remove the session
        db.drop_all()  # Drop tables after tests
        self.app_context.pop()  # Pop app context

    # Test that creation of users and setting of passwords has no issues
    def test_create_user(self):
        # add two users
        user1 = Users(username="First")
        user2 = Users(username="2nd")
        user1.set_password("1234")
        user2.set_password("password")
        db.session.add_all([user1, user2])
        db.session.commit()

        self.assertTrue(user1.check_password("1234"))
        self.assertTrue(user2.check_password('password'))
        self.assertFalse(user1.check_password('wrongpassword'))
        self.assertFalse(user2.check_password('1234'))
        self.assertFalse(user1.check_password('password'))
        self.assertFalse(user1.check_password(''))

    # Checks verifySolution.py gets the correct clues from a row/col of shadedCells (to then correctly verify the solution with)
    def test_generate_clues(self):
        self.assertListEqual([0],verifySolution.generateClues([0]))
        self.assertListEqual([0],verifySolution.generateClues([0,0,0,0,0]))
        self.assertListEqual([1,1], verifySolution.generateClues([1,0,0,1,0]))
        self.assertListEqual([3,1,2],verifySolution.generateClues([0,0,1,1,1,0,0,0,1,0,0,1,1,0]))
        self.assertListEqual([1],verifySolution.generateClues([1]))
        self.assertListEqual([6], verifySolution.generateClues([1,1,1,1,1,1]))


if __name__ == '__main__':
    unittest.main()
